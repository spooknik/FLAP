#################################################################################################################
#############################################_____ _      __   ____  ############################################
############################################|  ___| |     \_\ |  _ \ ############################################
########################################### | |_  | |     /_\ | |_) |############################################
############################################|  _| | |___ / _ \|  __/ ############################################
############################################|_|   |_____/_/ \_\_|    ############################################
#################################################################################################################
#
# [Filament Loading À la Prusa]
# 
# Project Page https://github.com/spooknik/FLAP
#
# V1.4 - Flap-ocalypse
#
# Thank you to Dr. Róbert Lőrincz for the work done on the Orbiter filament sensor and its config.
#
# TODO
# - Continuous beep during runout / color change - Next Version
# - Idle Timeout - Next Version
# - Use Respond instead of M118 for stuff - https://www.klipper3d.org/G-Codes.html#respond_1
#################################################################################################################
################################# CHANGE HERE MACRO CONFIGURABLES################################################
#################################################################################################################
[include flap_temp_control.cfg] # <---- SET YOUR TEMPS IN THIS FILE


[gcode_macro _SENSOR_VARIABLES]         
variable_nozzle_purge_length    :200    # filament extrude amount during load sequence, hotend purge from old filament, default is 200
variable_nozzle_purge_speed     :250    # filament extrude speed in mm/min adjust this value lower if flow is too high and extruder skips during loading, default is 300
variable_purge_check            :True   # Enables prompt to purge more after filament load
variable_unload_distance        :200     # filament retract distance for unload procedure. this length shall be long enough to extract the filament above the drive gears
variable_load_z_home            :False   # Homes Z axis before loading. Check your Homing Macro before enabling. Only when printer is not printing. 
variable_cooldown_unload        :True   # if true, cools down hotend after unloading. Otherwise keeps hotend at material temp until idle timeout
variable_cooldown_load          :True   # if true, cools down hotend after loading to set temp in next variable. If False, then keeps at material temp until idle timeout
variable_cooldown_load_temp     :160    # temp to cooldown to after loading. The temp should be set around 185 to prevent oozing, but keep the hot end close to print temp
variable_disable_runnout        :False  # disable runnout by setting this variable True
variable_enable_beep            :False  # uses M300 sound feature, set it True to enable
variable_continuous_beep_runout :False  # (Not used) on runout or color change, the printer will beep continuously until you take action
variable_heat_bed               :True   # heats the heated bed during filament load. This might be handy if you are doing to print right away. 
variable_auto_resume            :True   # automatically resumes print after runout or colorchange
variable_park_position_x        :10     # edit your X parking position here for pause macro triggered by runnout
variable_park_position_y        :10     # edit your Y parking position here for pause macro triggered by runnout
variable_park_lift_z            :30     # edit your Z lift amount for parking position here, default is 10
variable_park_retraction        :2      # edit your retraction amount for parking, default is 1

## NO TOUCH ##
variable_paused_state: 0
variable_runout_state: 0
variable_disable_autounload     :False  
variable_disable_autoload       :False  
variable_load_retry: 0
variable_color_change_state: 0

gcode:

# PIN ASSIGNMENT
# Filament Load Macro
[filament_switch_sensor filament_sense] 
pause_on_runout: False # This is set to false, because the pause is handled on its own in runnout_init. True tries to pause during filament unload.
runout_gcode: runnout_init
insert_gcode: filament_load_init
event_delay: 3.0
pause_delay: 0.5
switch_pin: PC2 # <- Assign your pin here

# Filament Unload macro - Comment this out if you are not using an unload button. Instead run "filament_unload_init" Macro manually from Mainsail.
#[gcode_button filament_unload]
#pin: ^!gpio0 # <- Assign your pin here
#release_gcode:  # filament unload procedure   
#  filament_unload_init
#press_gcode: # do not add any macro call here

#################################################################################################################
################################# END CHANGE HERE MACRO CONFIGURABLES ###########################################
#################################################################################################################
##################################  Here be dragons, but you do you. ############################################

[respond]
default_type: echo

[force_move]
enable_force_move: True

# END
#####################################################
# FILAMENT LOAD #

[gcode_macro filament_load_init]
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
  {% set temp = printer['gcode_macro _TEMP_VARIABLES'] %}
  {% set load = printer['gcode_macro filament_load'] %}
  G4 P250 # Wait 0.25 seconds 
  {% if (printer.print_stats.state != "printing") %}
    {% if (printer['filament_switch_sensor filament_sense'].filament_detected|lower == 'true')%} # We only want to load filament if the filament sensor reports true. This prevents a lot of problems :)
      {% if (sensor.paused_state == 0) %} 
        {% if (load.loadbusy == 0) %} # This prevents activating LOAD_PROMPT when taking out filament during unload.
              LOAD_PROMPT
        {% endif %}
      {% endif %}
    {% else %}
      M118 FLAP: Cannot load when there is no filament inserted!
      INSERT_NEW_Prompt
    {% endif %}
  {% else %}    
    M118 FLAP: Printing! Can't load filament right now!    
  {% endif %} 
  SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=filamentpresent VALUE=1
  UPDATE_DELAYED_GCODE ID=clear_changebusy DURATION=2  

[gcode_macro filament_load_runout]
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
  {% set temp = printer['gcode_macro _TEMP_VARIABLES'] %}
  {% set load = printer['gcode_macro filament_load'] %}
  {% if (printer.print_stats.state != "printing") %} #Make sure the printer is not printing (paused)
    {% if (printer['filament_switch_sensor filament_sense'].filament_detected|lower == 'true')%} # We only want to load filament if the filament sensor reports true. This prevents a lot of problems :)
      {% if (sensor.paused_state == 1) %} # This might not be needed, but doesn't hurt. 
        {% if (load.loadbusy == 0) %} # This prevents activating LOAD_PROMPT when taking out filament during unload.
              filament_load
        {% endif %}
      {% endif %}
    {% else %}
      M118 FLAP: Cannot load when there is no filament inserted!
      INSERT_NEW_PROMPT
    {% endif %}
  {% else %}    
    M118 FLAP: Printing! Can't load filament right now!    
  {% endif %} 
  SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=filamentpresent VALUE=1
  UPDATE_DELAYED_GCODE ID=clear_changebusy DURATION=2  

[gcode_macro filament_load]
variable_loadbusy: 0
variable_USER_TEMP: 0
variable_LOAD_TEMP: 0
gcode:    
    {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
    {% set temp = printer['gcode_macro _TEMP_VARIABLES'] %} # temp.user_load_temp temp.user_min_load_temp temp.user_bed_temp
    {% if loadbusy == 0 %} # requires [virtual_sdcard] 
      SET_GCODE_VARIABLE MACRO=filament_load VARIABLE=loadbusy VALUE=1
      SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=unloadbusy VALUE=1    
      {% set USER_TEMP = printer.extruder.target %} # save user set temperature before loading
      {% set LOAD_TEMP = 0 %}
      {% if (sensor.heat_bed |lower == 'true') %} # heat the bed
        {% if sensor.runout_state == 0 %}
          SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={temp.user_bed_temp}
          M118 FLAP: Heat bed heating! 
        {% endif %} 
      {% endif %}     
        {% if (printer.extruder.can_extrude|lower != 'true') or (printer.extruder.target < temp.user_min_load_temp) %} # checking for minimum extrusion temperature                       
          SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temp.user_load_temp} # set user defined load temperature
          #OIL: Custom Heating Hotend Prompt
          TEMPERATURE_WAIT_RESPONSIVE SENSOR=extruder MINIMUM={temp.user_min_load_temp}
      {% endif %}     
    {% if (sensor.enable_beep|lower == 'true') %} 
      M300 # beep sound
    {% endif %}
    {% if sensor.load_z_home|lower == 'true' %} 
      {% if (sensor.paused_state == 0) %} # No homing during pause
        G28 Z
        M118 FLAP: Homing Z Axis
      {% endif %}
    {% endif %}
      PURGE_READY
    {% else %}
      M118 FLAP: Filament already loaded!    
    {% endif %} 


[gcode_macro filament_purge]
gcode:
    RESPOND TYPE=command MSG=action:prompt_end
    {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
    {% set temp = printer['gcode_macro _TEMP_VARIABLES'] %} #  
    M82           #set extruder to absolute mode
    G92 E0
    G4 P1500      # wait for 1.5 seconds
    FORCE_MOVE STEPPER=extruder DISTANCE=15 VELOCITY=10 ACCEL=1000  # load filament inside the gears force move needs to be enabled    
    #OIL: Custom Heating Hotend Prompt
    TEMPERATURE_WAIT_RESPONSIVE SENSOR=extruder MINIMUM={temp.user_load_temp}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp.user_load_temp} # wait for reaching set temperature
    PURGING_PROMTP
    M118 FLAP: Filament now loading
    G1 E{sensor.nozzle_purge_length} F{sensor.nozzle_purge_speed} # extrude preconfigured purge length
    M400 # wait to complete nozzle purge
    {% if (sensor.purge_check|lower == 'false') %} 
      M118 FLAP: Filament load complete!
      UPDATE_DELAYED_GCODE ID=clear_unloadbusy DURATION=2
      {% if (sensor.cooldown_load|lower == 'true') %}
        {% if runout_state == 0 %}
          M118 FLAP: Setting extruder temp to: {sensor.cooldown_load_temp}
          SET_HEATER_TEMPERATURE HEATER=extruder TARGET={sensor.cooldown_load_temp}
        {% endif %}
      {% endif %}
    {% if runout_state == 1 %}
      {% if (sensor.auto_resume|lower == 'true') %} 
        RESUME
      {% endif %}
    {% endif %}
    {% else %}
      PURGE_PROMPT
      #M118 FLAP: PURGE_PROMPT Called
    {% endif %}

# END
#####################################################
# FILAMENT UNLOAD

[gcode_macro filament_unload_init]
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
  {% set temp = printer['gcode_macro _TEMP_VARIABLES'] %}
  {% set saved = printer.save_variables.variables %}
  {% if (printer.print_stats.state != "printing") %} # Make sure the printer is not printing
        {% if temp.user_load_temp == 0 %} # If we don't have the material selected stored, we need to ask the user.
          SET_GCODE_VARIABLE MACRO=_TEMP_VARIABLES VARIABLE=user_load_temp VALUE={saved.user_load_temp} 
          SET_GCODE_VARIABLE MACRO=_TEMP_VARIABLES VARIABLE=user_min_load_temp VALUE={saved.user_min_load_temp} 
          SET_GCODE_VARIABLE MACRO=_TEMP_VARIABLES VARIABLE=user_bed_temp VALUE={saved.user_bed_temp}
          filament_unload
        {% else %}
          UNLOAD_PROMPT
        {% endif %}
  {% else %}   
     M118 FLAP: Printing! Can't unload filament right now!
  {% endif %}

[gcode_macro filament_unload] 
variable_unloadbusy: 0
variable_filamentpresent: 0
gcode:
    {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
    {% set temp = printer['gcode_macro _TEMP_VARIABLES'] %} # temp.user_load_temp temp.user_min_load_temp temp.user_bed_temp
    {% if unloadbusy == 0 %} # requires [virtual_sdcard]  
      SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=unloadbusy VALUE=1
      SET_GCODE_VARIABLE MACRO=filament_load VARIABLE=loadbusy VALUE=1
      {% if (sensor.enable_beep|lower == 'true') %} 
        M300 # beep sound
      {% endif %}
      M118 FLAP: Filament unloading!    
      M83
      G92 E0
      M118 FLAP: Hotend heating!
      {% if (printer.extruder.can_extrude|lower != 'true') or (printer.extruder.target == 0)%} # checking for minimum extrusion temperature
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temp.user_load_temp} # restore user temp if it was set before loading
        #OIL: Custom Heating Hotend Prompt
        TEMPERATURE_WAIT_RESPONSIVE SENSOR=extruder MINIMUM={temp.user_min_load_temp}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp.user_min_load_temp} # wait for reaching configured unload temperature
      {% endif %}
      {% if (printer.extruder.target == 0) %} # checking for set temperature if is zero than set to user_min_load_temp hotend hot but cooling due to set target temp 0
        #OIL: Custom Heating Hotend Prompt
        TEMPERATURE_WAIT_RESPONSIVE SENSOR=extruder MINIMUM={temp.user_min_load_temp}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp.user_min_load_temp} # wait for reaching configured unload temperature
      {% endif %}
      UNLOADING_PROMPT
      G0 E10 F500 # extruder 20mm of filament before extracting 
      G0 E-5 F3600 	#extract filament to cold end
      G4 P2000 # wait for two seconds
      G0 E6 F3600 # push the filament back 
      G0 E-10 F3600 	#extract filament to cold end
      G0 E-{sensor.unload_distance} F300	# continue extraction slow allow filament to be cooled enough before reaches the gears  
      M400 # wait to complete unload      
      {% if (sensor.cooldown_unload|lower != 'true') %}
        {% if runout_state == 0 %} # Make sure we don't cooldown on a runout. That wouldn't be ideal. 
          M104 S0 T0
        {% endif %}
      {% endif %}
      UNLOAD_COMPLETE
    {% else %}      
      M118 FLAP: Nothing to unload!
    {% endif %}

#############################################END filament auto unload macro section END***********************************************************

# FILAMENT RUNOUT

[gcode_macro runnout_init]
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}  
  {% if (printer.print_stats.state == "printing") %}      
    {% if(sensor.disable_runnout|lower == 'false') %}
      filament_change_state1
    {% else %}
      M118 FLAP: Filament runnout is disabled in the sensor config file!   
    {% endif %}     
  {% endif %} 
  UPDATE_DELAYED_GCODE ID=clear_loadbusy DURATION=2
  UPDATE_DELAYED_GCODE ID=clear_unloadbusy DURATION=2    
  SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=filamentpresent VALUE=0

[gcode_macro filament_change_state1]
variable_changebusy: 0
variable_temp_target: 0
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
  {% set temp = printer['gcode_macro _TEMP_VARIABLES'] %}
  {% if changebusy == 0 %}
    PAUSE # call printer pause macro      
    SET_GCODE_VARIABLE MACRO=filament_change_state1 VARIABLE=changebusy VALUE=1 
    M118 FLAP: Filament runnout!
    {% if temp.user_load_temp == 0 %} # If we don't have the material temp stored, we grab the target extruder temp.
        SET_GCODE_VARIABLE MACRO=_TEMP_VARIABLES VARIABLE=user_load_temp VALUE={printer.extruder.target}
        SET_GCODE_VARIABLE MACRO=_TEMP_VARIABLES VARIABLE=user_min_load_temp VALUE={printer.extruder.target}
    {% endif %} 
    RUNOUT_PROMPT
    SET_GCODE_VARIABLE MACRO=_SENSOR_VARIABLES VARIABLE=runout_state VALUE=1
  {% else %}
  {% endif %}

[gcode_macro filament_change_state2]
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %} 
  {% set temp = printer['gcode_macro _TEMP_VARIABLES'] %}
  SET_GCODE_VARIABLE MACRO=filament_load VARIABLE=loadbusy VALUE=1      
  {% if (sensor.enable_beep|lower == 'true') %} 
    M300 # beep sound
  {% endif %}
  M118 FLAP: Unloading filament...   
  M83
  G92 E0   
  {% if (printer.extruder.can_extrude|lower != 'true')%} # checking for minimum extrusion temperature
        # check if temperature is over the minimum extrusion temp. min_extrude_temp must be defined in the extruder config (to about 185)
      M118 FLAP: Hotend heating!        
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temp.temp.user_load_temp} # restore user temp if it was set before loading
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp.user_min_load_temp} #wait for reaching filament unload temp
      {% endif %}     
  {% if(printer.extruder.target == 0) %} # checing for set temperature if is zero than set to 200 / hotend hot but cooling due to set target temp 0
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temp.user_load_temp} # restore user temp if it was set before loading
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp.user_min_load_temp} #wait for reaching filament unload temp
  {% endif %} 
  G0 E-5 F3600 	#extract filament to cold end
  G4 P2000 # wait for two seconds
  G0 E5 F3600 # push the filament back 
  G0 E-5 F3600 	#extract filament to cold end
  G0 E-{sensor.unload_distance} F300	# continue extraction slow allow filament to be cooled enough before reaches the gears  
  M400 #Wait for current moves to finish
  M118 FLAP: Load new filament! 
  {% if (sensor.shutdown_heater_runout|lower == 'true') %} # if true, the hotend heater will be set to zero immediately after the unload. Otherwise the printer will wait to idle timeout. 
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
  {% endif %}
   # switch off heater
  UPDATE_DELAYED_GCODE ID=clear_loadbusy DURATION=2.5 # timing must be set to clear delay plus 0.5s. is due to wait to remove filament before starting load even in case there is a blob at the tip of the extracted filament which would trigger the sensor twice
  #{% if(sensor.disable_autoload|lower == 'false') %}
  #  SET_GCODE_VARIABLE MACRO=_SENSOR_VARIABLES VARIABLE=disable_autoload VALUE=True # we disable autoload (if enabled) because we do not want it to trigger when user inserts filament. They must manually say "okay" to load.
  #{% endif %} 
  INSERT_NEW_PROMPT

# COLOR CHANGE (M600) WIP
[gcode_macro M600] #test
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
  {% set temp = printer['gcode_macro _TEMP_VARIABLES'] %}
  M118 FLAP: Color Change Started
  PAUSE # call printer pause macro      
  SET_GCODE_VARIABLE MACRO=_SENSOR_VARIABLES VARIABLE=color_change_state VALUE=1       
  M118 FLAP: Color Change Started
  {% if temp.user_load_temp == 0 %} # If we don't have the material temp stored, we grab the target extruder temp.
      SET_GCODE_VARIABLE MACRO=_TEMP_VARIABLES VARIABLE=user_load_temp VALUE={printer.extruder.target}
      SET_GCODE_VARIABLE MACRO=_TEMP_VARIABLES VARIABLE=user_min_load_temp VALUE={printer.extruder.target}
  {% endif %} 
  COLOR_PROMPT
  SET_GCODE_VARIABLE MACRO=_SENSOR_VARIABLES VARIABLE=runout_state VALUE=1
    


# PAUSE RESUME CANCEL
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE

gcode:  
    {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}  
    {% set x = params.X|default(sensor.park_position_x) %}   
    {% set y = params.Y|default(sensor.park_position_y) %}   
    {% set z = params.Z|default(sensor.park_lift_z)|float %} 
    {% set e = params.E|default(sensor.park_retraction) %}   
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=bed_restore_temp VALUE={printer.heater_bed.target} # Store the current bed temp
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=extruder_restore_temp VALUE={printer.extruder.target} # Store the current hotend temp
    ##### end of definitions #####
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{e} F2100
    G1 Z{z_safe}
    G90
    G1 X{x} Y{y} F6000
    M400 #Wait for current moves to finish
    {% if runout_state == 1 %}
      RUNOUT_PROMPT
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_SENSOR_VARIABLES VARIABLE=paused_state VALUE=1
    SET_GCODE_VARIABLE MACRO=_SENSOR_VARIABLES VARIABLE=disable_autounload VALUE=False

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_bed_restore_temp:0
variable_extruder_restore_temp:0
gcode:
    ##### set defaults #####
    {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %} 
    M118 FLAP: Restoring heaters temperature.
    M140 S{bed_restore_temp}
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_restore_temp}
    M104 S{extruder_restore_temp}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_restore_temp}
    {% set e = params.E|default(sensor.park_retraction) %} 
    G91
    G1 E{e} F2100
    G90    
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    SET_GCODE_VARIABLE MACRO=_SENSOR_VARIABLES VARIABLE=runout_state VALUE=0 # When we resume we need to zero out the runout state, as it has been resolved.
    SET_GCODE_VARIABLE MACRO=_SENSOR_VARIABLES VARIABLE=paused_state VALUE=0 # When we resume we need to zero the pause state. This gets triggered every time a print is resumed.
    SET_GCODE_VARIABLE MACRO=_SENSOR_VARIABLES VARIABLE=disable_autounload VALUE=True
    BASE_RESUME

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_GCODE_VARIABLE MACRO=_SENSOR_VARIABLES VARIABLE=runout_state VALUE=0 # If we cancel the printer, we need to reset these variables. 
    SET_GCODE_VARIABLE MACRO=_SENSOR_VARIABLES VARIABLE=paused_state VALUE=0
    SET_GCODE_VARIABLE MACRO=_SENSOR_VARIABLES VARIABLE=disable_autounload VALUE=True
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT

[delayed_gcode clear_unloadbusy]
gcode:
  SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=unloadbusy VALUE=0
  #M118 Clear Unload busy! 

[delayed_gcode clear_changebusy]
gcode:
  SET_GCODE_VARIABLE MACRO=filament_change_state1 VARIABLE=changebusy VALUE=0
  #M118 Clear Load busy!  

[delayed_gcode set_loadbusy]
gcode:
  SET_GCODE_VARIABLE MACRO=filament_load VARIABLE=loadbusy VALUE=1
  #M118 Set Load busy! 

[delayed_gcode clear_loadbusy]
gcode:
  SET_GCODE_VARIABLE MACRO=filament_load VARIABLE=loadbusy VALUE=0
  #M118 Clear Load busy!  


[delayed_gcode runout_beeping]
gcode:
  M300 P1000
  UPDATE_DELAYED_GCODE ID=beeping DURATION=3

[gcode_macro stop_runout_beeping]
gcode:
  UPDATE_DELAYED_GCODE ID=beeping DURATION=0

###### Changelog
#
# V1.0 - Initial release
# V1.1 - Refined the load and unload prompts. Thanks why_me and Aubey!
# V1.2 - Cleaned up prompt text, added cooldown after load (Thanks appleimperio), adding No Filament Detected prompt. 
# V1.3 - Added working color change (M600), Improved pruge dialogue, Added auto-resume after runout and color change.
# V1.4 - Added persistent storage of temps, "Retry" during filament purge, home Z during loading, tested working with klipper screen
